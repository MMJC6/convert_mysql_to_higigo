<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.starso.job.modules.assets.mapper.TbAssetsMapper" >

	<delete id="deleteAssetPort">
		delete from expose_asset_ports;
	</delete>
	<delete id="deleteIpGroup">
		delete from expose_ip_group;
	</delete>
	<delete id="deleteIpGroupRel">
		delete from expose_ip_group_rel;
	</delete>
	<delete id="deleteAssetDomain">
		delete from expose_asset_domain;
	</delete>
	<delete id="deleteDomainGroup">
		delete from expose_domain_group;
	</delete>
	<delete id="deleteDomainGroupRel">
		delete from expose_domain_group_rel;
	</delete>


	<insert id="saveAssetPortBatch" parameterType="list">
		insert into expose_asset_ports(id,port,service,closed,ip,os,dev,module,status,update_time,update_by,
		uid,risk_flag,diff_type,create_by,create_time)
		values
		<foreach collection="list" item="item"  separator="," >
			(#{item.id,jdbcType=VARCHAR},#{item.port,jdbcType=VARCHAR},#{item.service,jdbcType=VARCHAR},#{item.closed,jdbcType=VARCHAR},#{item.ip,jdbcType=BIGINT},
			#{item.os,jdbcType=VARCHAR},#{item.dev,jdbcType=VARCHAR},#{item.module,jdbcType=VARCHAR},#{item.status,jdbcType=VARCHAR},#{item.updateTime,jdbcType=TIMESTAMP},
			#{item.updateBy,jdbcType=VARCHAR},#{item.uid,jdbcType=VARCHAR},#{item.riskFlag,jdbcType=VARCHAR},#{item.diffType,jdbcType=VARCHAR},
			#{item.createBy,jdbcType=VARCHAR},#{item.createTime,jdbcType=TIMESTAMP})
		</foreach>
	</insert>

	<insert id="saveIpGroupBatch" parameterType="list">
		insert into expose_ip_group (id,name,status,create_time,create_by,update_time,update_by)
		values
		<foreach collection="list" item="item"  separator="," >
			(#{item.id,jdbcType=VARCHAR},#{item.name,jdbcType=VARCHAR},#{item.status,jdbcType=VARCHAR},
		    #{item.createTime,jdbcType=TIMESTAMP},#{item.createBy,jdbcType=VARCHAR},
		    #{item.updateTime,jdbcType=TIMESTAMP},#{item.updateBy,jdbcType=VARCHAR})
		</foreach>
	</insert>

	<insert id="saveIpGroupRelBatch" parameterType="list">
		insert into expose_ip_group_rel(id,group_id,ip_id)
		values
		<foreach collection="list" item="item"  separator="," >
			(MD5(UUID()),#{item.groupId,jdbcType=VARCHAR},#{item.ipId,jdbcType=VARCHAR})
		</foreach>
	</insert>
	<insert id="saveAssetDomainBatch" parameterType="list">
		insert into expose_asset_domain (id,domain,domain_name,begin_time,end_time,status,open_state,create_time,create_by,update_time,update_by)
		values
		<foreach collection="list" item="item"  separator="," >
			(#{item.id,jdbcType=VARCHAR},#{item.domain,jdbcType=VARCHAR},#{item.domainName,jdbcType=VARCHAR},
			#{item.beginTime,jdbcType=VARCHAR},#{item.endTime,jdbcType=VARCHAR},#{item.status,jdbcType=VARCHAR},
			#{item.openState,jdbcType=VARCHAR},#{item.createTime,jdbcType=TIMESTAMP},#{item.createBy,jdbcType=VARCHAR},
			#{item.updateTime,jdbcType=TIMESTAMP},#{item.updateBy,jdbcType=VARCHAR})
		</foreach>
	</insert>
	<insert id="saveDomainGroupBatch" parameterType="list">
		insert into expose_domain_group (id,name,status,create_time,create_by,update_time,update_by)
		values
		<foreach collection="list" item="item"  separator="," >
			(#{item.id,jdbcType=VARCHAR},#{item.name,jdbcType=VARCHAR},#{item.status,jdbcType=TIMESTAMP},#{item.createTime,jdbcType=TIMESTAMP},
			#{item.createBy,jdbcType=VARCHAR},#{item.updateTime,jdbcType=TIMESTAMP},#{item.updateBy,jdbcType=VARCHAR})
		</foreach>
	</insert>
	<insert id="saveDomainGroupRelBatch" parameterType="list">
		insert into expose_domain_group_rel (id,group_id,domain_id)
		values
		<foreach collection="list" item="item"  separator="," >
			(#{item.id,jdbcType=VARCHAR},#{item.groupId,jdbcType=VARCHAR},#{item.domainId,jdbcType=VARCHAR})
		</foreach>
	</insert>

    <insert id="insertScanAssets">
		INSERT into workbench_assets (id, ip_uuid, `host`, ip, `port`, service, date, os, `status`, type, create_time)
		SELECT
			MD5(UUID()),
			IFNULL(wa.ip_uuid,ip.ipid) ip_uuid,
			al.hostname as `host`,
			inet_ntoa(al.vuln_ip),
			al.space3,
			al.service,
			now(),
			al.ostype,
			'1' as `status`,
			IFNULL(ps.type,'1') type,
			now()
		FROM
			(
				SELECT
					va.vuln_ip,'' hostname, va.space3,IF(va.space2 is NULL or va.space2 = '','unknown',va.space2) service, '' ostype,va.id
				FROM
					vuln_resource_ip_assets va
				WHERE
					va.vuln_ip is not null
				    and va.vuln_ip != ''
				    and va.space2 is not null and va.space2 != ''
				    and va.space3 is not null and va.space3 != ''
					and NOT EXISTS (
						SELECT * from (
							SELECT a.ip,a.`port`,LOWER(a.service) service from workbench_assets a where a.`status` BETWEEN 1 and 2
							UNION
							SELECT INET_NTOA(s.ip),s.`port`,
							(SELECT LOWER(d.dict_label) from sys_dict_data d where d.dict_type='service_agreement' and d.`status` = '1' and d.dict_value = s.server_agreement) service
							from assets_resources_ports_service s  where s.`status` = '1'
						) e where e.ip = inet_ntoa(va.vuln_ip) and e.port = va.space3 and e.service = LOWER(IF(va.space2 is NULL or va.space2 = '','unknown',va.space2))
					)
					AND NOT EXISTS (
						SELECT INET_NTOA(s.ip) ip
						FROM assets_terminal_ip s WHERE s.`status` = '1' and s.ip = va.vuln_ip
					)
					GROUP BY va.vuln_ip,va.space3,va.space2
			) al
			INNER JOIN (SELECT i.vuln_ip ,MD5(UUID()) ipid FROM vuln_resource_ip_assets i GROUP BY i.vuln_ip) ip on ip.vuln_ip = al.vuln_ip
			LEFT JOIN (SELECT a.ip,a.ip_uuid from workbench_assets a where a.`status` BETWEEN 1 and 2 GROUP BY a.ip,a.ip_uuid) wa on wa.ip = inet_ntoa(al.vuln_ip)
			LEFT JOIN (SELECT ip,'0' type from (
												   SELECT i.ip from assets_terminal_ip i where i.`status` = '1'
												   UNION ALL
												   SELECT s.ip from assets_resources_ports_service s where s.`status` = '1'
											   ) a
					   GROUP BY a.ip) ps on ps.ip=al.vuln_ip
	</insert>

	<select id="selectScanAssetsServers" resultType="java.lang.String">
		SELECT
			DISTINCT p.space2
		FROM
			vuln_resource_ip_assets p
		WHERE
			p.space3 is not null
		    and p.space3 != ''
			and p.vuln_ip is not null
			and p.vuln_ip != ''
			and NOT EXISTS(
				SELECT 1 from sys_dict_data d where d.dict_type = 'service_agreement' and d.`status` = '1' AND  LOWER(d.dict_label) = LOWER(IF(p.space2 is NULL or p.space2 = '','unknown',p.space2))
			)
	</select>

	<insert id="insertServiceAgreement" parameterType="java.util.Set">
		INSERT INTO sys_dict_data(dict_sort, dict_label, dict_value ,dict_type ,`status` ,create_by,create_time,update_by,update_time)
		VALUES
		<foreach collection="set" item="item" index="index" separator="," >
			(
			 IFNULL((SELECT max(cast(dict_value as SIGNED)) from sys_dict_data d where `dict_type` = 'service_agreement'),0)+1,
			 #{item,jdbcType=VARCHAR},
			 IFNULL((SELECT max(cast(dict_value as SIGNED)) from sys_dict_data d where `dict_type` = 'service_agreement'),0)+1,
			 'service_agreement',
			 '1',
			 '1',
		     now(),
			 '1',
		     now()
			)
		</foreach>
	</insert>

	<update id="updateNoDutyAssets">
		UPDATE workbench_assets t,workbench_assets_user wu SET t.`status` = '8' , wu.`status` = '8'
		WHERE t.ip_uuid = wu.asets_ip_id AND t.`status` = '2' AND wu.`status` = '2' AND NOT EXISTS (
			SELECT '' FROM workbench_schedule_task wt WHERE wu.user_id = wt.executor_id AND (wu.assign_time BETWEEN wt.begain_time AND wt.end_time)
		    and wt.status = '1' and wt.type = '1'
		)
	</update>

	<select id="selectNotAssignAssets" resultType="com.starso.job.modules.assets.domain.WorkbenchAssets">
		SELECT t.ip, t.ip_uuid, t.date from workbench_assets t
		where (t.`status` = '1' or t.`status` = '6' or t.`status` = '8')
		GROUP BY t.ip_uuid,t.ip
		ORDER BY t.date , t.ip
	</select>

	<insert id="insertAssign" parameterType="com.starso.job.modules.assets.domain.WorkbenchAssets">
		insert into workbench_assets_assign(id, asets_ip_id, assign_time, status)
		values(#{id,jdbcType=VARCHAR},#{asetsIpId,jdbcType=VARCHAR},now(),'1')
	</insert>

	<select id="getAssetUsers" parameterType="com.starso.job.modules.assets.domain.WorkbenchAssets" resultType="com.starso.system.api.domain.SysUser">
		SELECT DISTINCT u.user_id,IFNULL(au.count,#{count,jdbcType=INTEGER}) `rows` ,
		IFNULL((SELECT COUNT(1) from workbench_assets_user wau where (wau.status BETWEEN '3' and '5' or wau.status = '7') and u.user_id = wau.user_id),0)/au.num*8 as num
		from sys_user u
		LEFT JOIN (SELECT user_id ,(#{count,jdbcType=INTEGER} - COUNT(1)) count ,(TIMESTAMPDIFF(HOUR, MIN(assign_time), NOW())) num from workbench_assets_user
		INNER JOIN (SELECT * from workbench_assets where status='2' group by ip,ip_uuid)  a on  a.ip_uuid = workbench_assets_user.asets_ip_id
		where workbench_assets_user.`status` = '2' GROUP BY user_id ) au on u.user_id = au.user_id
		INNER JOIN workbench_schedule_task wt ON u.user_id = wt.executor_id AND wt.type = 1 AND wt.`status` = 1
		where u.status = '1'
		  AND (NOW() BETWEEN IF(wt.begain_time > DATE_FORMAT(#{workBeginTime},'%Y-%m-%d %T'),wt.begain_time,DATE_FORMAT(#{workBeginTime},'%Y-%m-%d %T')) AND IF(wt.end_time > DATE_FORMAT(#{workEndTime},'%Y-%m-%d %T'),DATE_FORMAT(#{workEndTime},'%Y-%m-%d %T'),wt.end_time))
		  and EXISTS(
			SELECT
			*
			FROM
			sys_user_role uf,
			sys_role_menu fm,
			sys_menu m
			WHERE
			uf.role_id = fm.role_id
		  AND fm.menu_id = m.menu_id
		  and m.`status` = '1'
		  AND m.perms = 'workflow:assets'
		  and uf.user_id = u.user_id)
		  and IFNULL(au.count,#{count,jdbcType=INTEGER}) > 0
		order by `rows` desc, num desc,u.nick_name
	</select>

	<insert id="inserAssetsUserstBatch" parameterType="java.util.List">
		insert into workbench_assets_user (id, asets_ip_id, user_id, assign_time, status, assign_id)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.id,jdbcType=VARCHAR}, #{item.asetsIpId,jdbcType=VARCHAR}, #{item.userId,jdbcType=VARCHAR},
			now(), #{item.status,jdbcType=CHAR}, #{item.assignId,jdbcType=VARCHAR})
		</foreach>
	</insert>

	<update id="updateAssetsBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" separator=";">
			update workbench_assets
			set
			status = #{item.status,jdbcType=CHAR}
			where ip_uuid = #{item.ipUuid,jdbcType=VARCHAR}
		</foreach>
	</update>

	<select id="selectNotAssignAudit" resultType="com.starso.job.modules.assets.domain.WorkbenchAssetsConfirmRecord">
		select
			id, assets_id, assets_ip_id, status, confirm_type, confirm_user_id, confirm_time,audit_status
		from workbench_assets_confirm_record
		where status = '1' and audit_status = '0'
	</select>

	<select id="getAssetsAuditUsers" parameterType="int" resultType="com.starso.system.api.domain.SysUser">
		SELECT u.user_id,IFNULL(au.count,#{count,jdbcType=INTEGER}) `rows` ,
		IFNULL((SELECT COUNT(1) from workbench_assets_confirm_assign wau where wau.audit_status BETWEEN 2 and 3 and u.user_id = wau.audit_user_id),0)/au.num*8 as num
		from sys_user u
		LEFT JOIN (SELECT audit_user_id as user_id ,(#{count,jdbcType=INTEGER} - COUNT(1)) count ,(TIMESTAMPDIFF(HOUR, MIN(assign_time), NOW())) num from workbench_assets_confirm_assign where `status` = '1' and audit_status = '1' GROUP BY audit_user_id ) au on u.user_id = au.user_id
		where u.status = '1'
		  and EXISTS(
			SELECT
			*
			FROM
			sys_user_role uf,
			sys_role_menu fm,
			sys_menu m
			WHERE
			uf.role_id = fm.role_id
		  AND fm.menu_id = m.menu_id
		  and m.`status` = '1'
		  AND m.perms = 'workflow:assetsAudit'
		  and uf.user_id = u.user_id)
		  and IFNULL(au.count,#{count,jdbcType=INTEGER}) > 0
		order by `rows` desc, num desc,u.nick_name
	</select>

	<insert id="inserConfirmAssignsBatch" parameterType="java.util.List">
		insert into workbench_assets_confirm_assign (id, confirm_id, status,
		assign_time, audit_user_id, audit_status, assign_id)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.id,jdbcType=VARCHAR}, #{item.confirmId,jdbcType=VARCHAR}, '1', now(),
			#{item.auditUserId,jdbcType=VARCHAR}, #{item.auditStatus,jdbcType=CHAR}, #{item.assignId,jdbcType=CHAR})
		</foreach>
	</insert>

	<update id="updateConfirmRecordsBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" separator=";">
			update workbench_assets_confirm_record
			set
			audit_status = #{item.auditStatus,jdbcType=CHAR}
			where id = #{item.id,jdbcType=VARCHAR}
		</foreach>
	</update>

	<select id="selectOneLineNotice" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT t.userId,t.userName,t.mobilePhoneNo,t.sendType,t.userType,t.email,
			   GROUP_CONCAT(t.id) id,
			   GROUP_CONCAT(t.ipUuid) ipUuid,
			   GROUP_CONCAT(t.ip) ip,
			   count(1) count,
			   GROUP_CONCAT(IF(t.countType = '1',t.id,NULL)) id1,
			   GROUP_CONCAT(IF(t.countType = '1',t.ipUuid,NULL)) ipUuid1,
			   GROUP_CONCAT(IF(t.countType = '1',t.ip,NULL)) ip1,
			   SUM(IF(t.countType = '1',1,0)) count1,
			   GROUP_CONCAT(IF(t.countType = '2',t.id,NULL)) id2,
			   GROUP_CONCAT(IF(t.countType = '2',t.ipUuid,NULL)) ipUuid2,
			   GROUP_CONCAT(IF(t.countType = '2',t.ip,NULL)) ip2,
			   SUM(IF(t.countType = '2',1,0)) count2,
			   GROUP_CONCAT(IF(t.countType = '3',t.id,NULL)) id3,
			   GROUP_CONCAT(IF(t.countType = '3',t.ipUuid,NULL)) ipUuid3,
			   GROUP_CONCAT(IF(t.countType = '3',t.ip,NULL)) ip3,
			   SUM(IF(t.countType = '3',1,0)) count3
		from (
			SELECT al.id, al.asets_ip_id ipUuid, al.user_id userId, al.status, al.notice_type noticeType, al.ip,al.userName,al.mobilePhoneNo,al.sendType,al.userType,al.email,
			CASE when count &lt;= ${secondInterval} then '1'
			when count &gt; ${secondInterval} and count &lt;= ${thirdInterval} then '2'
			when count &gt; ${thirdInterval} then '3' else '' end as countType
			from (
			SELECT ba.*,a.ip,u.email,u.user_type as userType,u.user_id as userId,u.nick_name as userName,u.phonenumber as mobilePhoneNo,
			CONCAT(IF(st.wechat_status = '1','1,',''),IF(st.phone_status = '1','2,',''),IF(st.email_status = '1','3,','')) sendType,
			case WHEN DATE_FORMAT(start_time, '%Y-%m-%d') &gt; DATE_FORMAT(end_time, '%Y-%m-%d') then 0
			WHEN DATE_FORMAT(start_time, '%Y-%m-%d') = DATE_FORMAT(end_time, '%Y-%m-%d') then TIMESTAMPDIFF(MINUTE, start_time, end_time)
			ELSE TIMESTAMPDIFF(MINUTE, start_time, CONCAT( DATE_FORMAT(start_time, '%Y-%m-%d'), ' ', DATE_FORMAT(end_time, '%T'))) +
			( SELECT COUNT(1) FROM s_workday WHERE CAST(workday as datetime) &gt; start_time AND CAST(workday as datetime) &lt; end_time ) * #{timeDifference} end count
			from (
			SELECT
			au.id, au.asets_ip_id, au.user_id, au.assign_time, au.status, au.notice_type,
			IF(w1.id is NULL,(SELECT CONCAT(MIN(workday),#{workBeginTime}) from s_workday WHERE workday &gt; au.start_time_),au.start_time_) start_time,
			IF(w2.id is NULL,(SELECT CONCAT(MAX(workday),#{workEndTime}) from s_workday WHERE workday &lt; au.end_time_),au.end_time_) end_time
			from
			(SELECT *,
			CASE WHEN assign_time &lt; CONCAT(DATE_FORMAT(assign_time, '%Y-%m-%d'),#{workBeginTime}) then CONCAT(DATE_FORMAT(assign_time, '%Y-%m-%d'),#{workBeginTime})
			WHEN  assign_time &gt; CONCAT(DATE_FORMAT(assign_time, '%Y-%m-%d'),#{workEndTime}) then CONCAT(DATE_FORMAT(date_add(assign_time, interval 1 day), '%Y-%m-%d'),#{workBeginTime})
			ELSE assign_time END as start_time_,
			CASE WHEN now() &lt; CONCAT(DATE_FORMAT(now(), '%Y-%m-%d'),#{workBeginTime}) then CONCAT(DATE_FORMAT(date_add(now(), interval -1 day), '%Y-%m-%d'),#{workEndTime})
			WHEN  now() &gt; CONCAT(DATE_FORMAT(now(), '%Y-%m-%d'),#{workEndTime}) then CONCAT(DATE_FORMAT(now(), '%Y-%m-%d'),#{workEndTime})
			ELSE now() END as end_time_
			from workbench_assets_user
			where status = '2') au
			LEFT JOIN s_workday w1 on w1.workday = DATE_FORMAT(au.start_time_, '%Y-%m-%d')
			LEFT JOIN s_workday w2 on w2.workday = DATE_FORMAT(au.end_time_, '%Y-%m-%d')
			) ba
			INNER JOIN (SELECT * from workbench_assets where status = '2' group by ip,ip_uuid) a on ba.asets_ip_id = a.ip_uuid
			INNER JOIN sys_user u on ba.user_id = u.user_id
			left join s_user_send_type st on st.user_id = u.user_id
			HAVING count &gt; ${firstInterval}
			) al
			HAVING countType != al.notice_type or al.notice_type is NULL
			)t
		GROUP BY t.userId
	</select>

	<select id="selectSecondLineNotice" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			t.userId,t.userName,t.sendType,t.userType,t.email,t.mobilePhoneNo,
			GROUP_CONCAT(t.id) id,
			GROUP_CONCAT(t.ipUuid) ipUuid,
			GROUP_CONCAT(t.ip) ip,
			count(1) count,
			GROUP_CONCAT(IF(t.countType = '1',t.id,NULL)) id1,
			GROUP_CONCAT(IF(t.countType = '1',t.ipUuid,NULL)) ipUuid1,
			GROUP_CONCAT(IF(t.countType = '1',t.ip,NULL)) ip1,
			SUM(IF(t.countType = '1',1,0)) count1,
			GROUP_CONCAT(IF(t.countType = '2',t.id,NULL)) id2,
			GROUP_CONCAT(IF(t.countType = '2',t.ipUuid,NULL)) ipUuid2,
			GROUP_CONCAT(IF(t.countType = '2',t.ip,NULL)) ip2,
			SUM(IF(t.countType = '2',1,0)) count2,
			GROUP_CONCAT(IF(t.countType = '3',t.id,NULL)) id3,
			GROUP_CONCAT(IF(t.countType = '3',t.ipUuid,NULL)) ipUuid3,
			GROUP_CONCAT(IF(t.countType = '3',t.ip,NULL)) ip3,
			SUM(IF(t.countType = '3',1,0)) count3
		from (
		SELECT al.id, al.assets_ip_id ipUuid, al.audit_user_id userId, al.notice_type noticeType, al.ip,al.confirm_id confirmId,al.userName,al.mobilePhoneNo,al.sendType,al.userType,al.email,
		CASE when count &lt;= ${secondInterval} then '1'
		when count &gt; ${secondInterval} and count &lt;= ${thirdInterval} then '2'
		when count &gt; ${thirdInterval} then '3' else '' end as countType
		from (
		SELECT ba.*,a.ip,u.email,u.nick_name userName,cr.assets_ip_id,u.user_type as userType,u.phonenumber as mobilePhoneNo,
		CONCAT(IF(st.wechat_status = '1','1,',''),IF(st.phone_status = '1','2,',''),IF(st.email_status = '1','3,','')) sendType,
		case WHEN DATE_FORMAT(start_time, '%Y-%m-%d') &gt; DATE_FORMAT(end_time, '%Y-%m-%d') then 0
		WHEN DATE_FORMAT(start_time, '%Y-%m-%d') = DATE_FORMAT(end_time, '%Y-%m-%d') then TIMESTAMPDIFF(MINUTE, start_time, end_time)
		ELSE TIMESTAMPDIFF(MINUTE, start_time, CONCAT( DATE_FORMAT(start_time, '%Y-%m-%d'), ' ', DATE_FORMAT(end_time, '%T'))) +
		( SELECT COUNT(1) FROM s_workday WHERE CAST(workday as datetime) &gt; start_time AND CAST(workday as datetime) &lt; end_time ) * #{timeDifference} end count
		from (
		SELECT
		au.id,
		au.confirm_id,
		au.audit_user_id,
		au.notice_type,
		IF(w1.id is NULL,(SELECT CONCAT(MIN(workday),#{workBeginTime}) from s_workday WHERE workday &gt; au.start_time_),au.start_time_) start_time,
		IF(w2.id is NULL,(SELECT CONCAT(MAX(workday),#{workEndTime}) from s_workday WHERE workday &lt; au.end_time_),au.end_time_) end_time
		from
		(SELECT *,
		CASE WHEN assign_time &lt; CONCAT(DATE_FORMAT(assign_time, '%Y-%m-%d'),#{workBeginTime}) then CONCAT(DATE_FORMAT(assign_time, '%Y-%m-%d'),#{workBeginTime})
		WHEN  assign_time &gt; CONCAT(DATE_FORMAT(assign_time, '%Y-%m-%d'),#{workEndTime}) then CONCAT(DATE_FORMAT(date_add(assign_time, interval 1 day), '%Y-%m-%d'),#{workBeginTime})
		ELSE assign_time END as start_time_,
		CASE WHEN now() &lt; CONCAT(DATE_FORMAT(now(), '%Y-%m-%d'),#{workBeginTime}) then CONCAT(DATE_FORMAT(date_add(now(), interval -1 day), '%Y-%m-%d'),#{workEndTime})
		WHEN  now() &gt; CONCAT(DATE_FORMAT(now(), '%Y-%m-%d'),#{workEndTime}) then CONCAT(DATE_FORMAT(now(), '%Y-%m-%d'),#{workEndTime})
		ELSE now() END as end_time_
		from workbench_assets_confirm_assign
		where audit_status = '1') au
		LEFT JOIN s_workday w1 on w1.workday = DATE_FORMAT(au.start_time_, '%Y-%m-%d')
		LEFT JOIN s_workday w2 on w2.workday = DATE_FORMAT(au.end_time_, '%Y-%m-%d')
		) ba
		INNER JOIN workbench_assets_confirm_record cr on cr.id = ba.confirm_id
		INNER JOIN (SELECT * from workbench_assets group by ip,ip_uuid) a on cr.assets_ip_id = a.ip_uuid
		INNER JOIN sys_user u on ba.audit_user_id = u.user_id
		left join s_user_send_type st on st.user_id = u.user_id
		HAVING count &gt; ${firstInterval}
		) al
		HAVING countType != al.notice_type or al.notice_type is NULL
		) t
		GROUP BY t.userId
	</select>

	<update id="updateNoticeStatusBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" separator=";">
			update workbench_assets_user
			set
			notice_type = #{item.countType,jdbcType=CHAR}
			<if test="item.countType == 3">
				,status = '6'
			</if>
			where id = #{item.id,jdbcType=VARCHAR}
		</foreach>
	</update>

	<update id="updateConfirmAssignBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" separator=";">
			update workbench_assets_confirm_assign
			set
			notice_type = #{item.countType,jdbcType=CHAR}
			where id = #{item.id,jdbcType=VARCHAR}
		</foreach>
	</update>

	<update id="recallAlerts" parameterType="String">
		update workbench_assets
		set
			status = '6'
		where ip_uuid in (
			select asets_ip_id from workbench_assets_user where id in (${_parameter})
		)
	</update>

</mapper>
