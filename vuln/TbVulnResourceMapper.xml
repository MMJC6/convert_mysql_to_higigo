<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.starso.job.modules.vuln.mapper.TbVulnResourceMapper">
    <resultMap id="BaseResultMap" type="com.starso.system.api.domain.TbVulnResourceIpAssets">
        <id column="id" jdbcType="VARCHAR" property="id" />
        <result column="vuln_resource_id" jdbcType="VARCHAR" property="vulnResourceId" />
        <result column="vuln_ip" jdbcType="BIGINT" property="vulnIp" />
        <result column="assets_id" jdbcType="VARCHAR" property="assetsId" />
        <result column="assets_dept_id" jdbcType="VARCHAR" property="assetsDeptId" />
        <result column="assets_name" jdbcType="VARCHAR" property="assetsName" />
        <result column="assets_host_name" jdbcType="VARCHAR" property="assetsHostName" />
        <result column="assets_group" jdbcType="VARCHAR" property="assetsGroup" />
        <result column="send_id" jdbcType="VARCHAR" property="sendId" />
        <result column="send_status" jdbcType="CHAR" property="sendStatus" />
        <result column="send_time" jdbcType="TIMESTAMP" property="sendTime" />
        <result column="back_status" jdbcType="VARCHAR" property="backStatus" />
        <result column="back_time" jdbcType="TIMESTAMP" property="backTime" />
        <result column="back_user_id" jdbcType="VARCHAR" property="backUserId" />
        <result column="correct_status" jdbcType="CHAR" property="correctStatus" />
        <result column="correct_time" jdbcType="TIMESTAMP" property="correctTime" />
        <result column="misreport_status" jdbcType="CHAR" property="misreportStatus" />
        <result column="save_flag" jdbcType="CHAR" property="saveFlag" />
        <result column="save_time" jdbcType="TIMESTAMP" property="saveTime" />
        <result column="find_time" jdbcType="TIMESTAMP" property="findTime" />
        <result column="scan_task" jdbcType="BIGINT" property="scanTask" />
        <result column="retest_num" jdbcType="INTEGER" property="retestNum" />
        <result column="is_retest_wrong" jdbcType="CHAR" property="isRetestWrong" />
        <result column="is_filtered" jdbcType="CHAR" property="isFiltered" />
        <result column="filtered_time" jdbcType="TIMESTAMP" property="filteredTime" />
        <result column="initial_task_id" jdbcType="VARCHAR" property="initialTaskId" />
        <result column="source_id" jdbcType="VARCHAR" property="sourceId" />
        <result column="recurrent_vuln_id" jdbcType="VARCHAR" property="recurrentVulnId" />
        <result column="space1" jdbcType="VARCHAR" property="space1" />
        <result column="space2" jdbcType="VARCHAR" property="space2" />
        <result column="space3" jdbcType="VARCHAR" property="space3" />
        <result column="space4" jdbcType="VARCHAR" property="space4" />
        <result column="space5" jdbcType="VARCHAR" property="space5" />
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="level" jdbcType="VARCHAR" property="level" />
        <result column="CVE" jdbcType="VARCHAR" property="cve" />
        <result column="CNCVE" jdbcType="VARCHAR" property="cncve" />
        <result column="CNNVD" jdbcType="VARCHAR" property="cnnvd" />
        <result column="version" jdbcType="VARCHAR" property="version" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="vulnUrl" jdbcType="VARCHAR" property="vulnUrl" />
        <result column="ips" jdbcType="VARCHAR" property="ips" />
        <result column="lowRiskCount" property="lowRiskCount" jdbcType="INTEGER" />
        <result column="middleRiskCount" property="middleRiskCount" jdbcType="INTEGER" />
        <result column="hightRiskCount" property="hightRiskCount" jdbcType="INTEGER" />
        <result column="urgentRiskCount" property="urgentRiskCount" jdbcType="INTEGER" />
        <result column="infoCount" property="infoCount" jdbcType="INTEGER" />
        <result column="vulnIpStr" jdbcType="VARCHAR" property="vulnIpStr" />
        <result column="detail" jdbcType="VARCHAR" property="detail" />
        <result column="reinforcement" jdbcType="VARCHAR" property="reinforcement" />
    </resultMap>
    <sql id="Base_Column_List">
        v.id, v.vuln_resource_id, v.vuln_ip,INET_NTOA(v.vuln_ip) vulnIpStr,v.assets_id, v.dept_id assets_dept_id, v.assets_name, v.assets_host_name,
    v.assets_group, v.send_id, v.send_status, v.send_time, v.back_status, v.back_time,date_format(v.back_time,'%Y-%m-%d %H:%i:%s')  backTimeStr, v.back_user_id,
    v.correct_status, v.correct_time, v.misreport_status, v.save_flag, v.save_time, v.find_time,date_format(v.find_time,'%Y-%m-%d %H:%i:%s')  findTimeStr,
    v.scan_task, v.retest_num, v.is_retest_wrong, v.is_filtered, v.filtered_time, v.initial_task_id,
    v.source_id, v.recurrent_vuln_id, v.space1, v.space2, v.space3, v.space4, v.space5,v.title,v.level,v.CVE,v.CNCVE,v.CNNVD,v.version,
    v.update_time,date_format(v.update_time,'%Y-%m-%d %H:%i:%s')  updateTimeStr
    </sql>

    <select id="selectVulnResourceById" parameterType="java.lang.String" resultMap="BaseResultMap">
        select via.id,via.title,via.level,via.top_type type,INET_NTOA(via.vuln_ip) vulnIpStr,via.find_time,via.CNNVD,via.CVE,via.CNCVE,
               vd.detail,vd.reinforcement,via.vuln_ip
        from vuln_resource_ip_assets via
                 LEFT JOIN vuln_resource_detail vd ON via.vuln_resource_id = vd.vuln_id
        where via.id = #{id,jdbcType=VARCHAR}
    </select>

    <select id="selectAllVulnResource" resultType="com.starso.system.api.domain.TbVulnResourceIpAssets">
        select <include refid="Base_Column_List"/>
        from vuln_resource_ip_assets v
        where ((v.back_status = '3' and v.correct_status = '4') or (v.back_status = '1' and v.misreport_status = '3'))
    </select>

    <select id="getIpListByAssetsId" resultType="java.util.Map">
        select arps.ip,arps.port,arps.server_agreement from assets_resources_ports_service arps,vuln_resource_ip_assets va
        where arps.status = '1' and arps.assets_id = va.assets_id and va.vuln_ip = #{vulnIp,jdbcType=BIGINT}
    </select>

    <select id="getAssetsBusinessListByVulnIp" parameterType="Long" resultType="java.util.Map">
        select b.id,b.name
        from assets_resources_ports_service arps
        inner join assets_port_server_rel psl on psl.resources_id = arps.id and psl.status = '1'
        inner join assets_business_ports_service bps on bps.id = psl.business_id and bps.status = '1'
        inner join assets_business b on b.id = bps.assets_id and b.status = '1'
        where arps.status = '1' and arps.ip = #{vulnIp,jdbcType=BIGINT}
    </select>

    <insert id="insertVulnResourceBatch" parameterType="list" >
        insert into vuln_resource_ip_assets(
        id,vuln_resource_id,version,type,title,level,CVE,CNCVE,CNNVD,vuln_ip,assets_id,dept_id,assets_name,assets_host_name,assets_group
        ,send_id,send_status,send_time,back_status,back_time,back_user_id,correct_status,correct_time,misreport_status
        ,save_flag,save_time,find_time,scan_task,retest_num,is_retest_wrong,is_filtered,filtered_time,initial_task_id
        ,source_id,recurrent_vuln_id,scan_vuln,create_time,update_time,top_type,space1,space2,space3,receive_time
        )
        values
        <foreach collection="list" item="item"  separator="," >
            (#{item.id,jdbcType=VARCHAR}, #{item.vulnResourceId,jdbcType=VARCHAR}, #{item.version,jdbcType=CHAR},
            #{item.type,jdbcType=VARCHAR},#{item.title,jdbcType=VARCHAR}, #{item.level,jdbcType=CHAR},#{item.cve,jdbcType=VARCHAR},
            #{item.cncve,jdbcType=VARCHAR},#{item.cnnvd,jdbcType=VARCHAR},#{item.vulnIp,jdbcType=VARCHAR},#{item.assetsId,jdbcType=VARCHAR},
            #{item.deptId,jdbcType=VARCHAR},#{item.assetsName,jdbcType=VARCHAR},#{item.assetsHostName,jdbcType=VARCHAR},#{item.assetsGroup,jdbcType=VARCHAR},
            #{item.sendId,jdbcType=VARCHAR},#{item.sendStatus,jdbcType=VARCHAR},#{item.sendTime,jdbcType=TIMESTAMP},#{item.backStatus,jdbcType=VARCHAR},
            #{item.backTime,jdbcType=TIMESTAMP},#{item.backUserId,jdbcType=VARCHAR},#{item.correctStatus,jdbcType=VARCHAR},#{item.correctTime,jdbcType=TIMESTAMP},
            #{item.misreportStatus,jdbcType=VARCHAR},#{item.saveFlag,jdbcType=VARCHAR},#{item.saveTime,jdbcType=TIMESTAMP},#{item.findTime,jdbcType=TIMESTAMP},
            #{item.scanTask,jdbcType=VARCHAR},#{item.retestNum,jdbcType=VARCHAR},#{item.isRetestWrong,jdbcType=VARCHAR},#{item.isFiltered,jdbcType=VARCHAR},
            #{item.filteredTime,jdbcType=TIMESTAMP},#{item.initialTaskId,jdbcType=VARCHAR},#{item.sourceId,jdbcType=VARCHAR},#{item.recurrentVulnId,jdbcType=VARCHAR},
            #{item.scanVuln,jdbcType=VARCHAR},now(),now(),#{item.topType,jdbcType=VARCHAR},#{item.space1,jdbcType=VARCHAR},#{item.space2,jdbcType=VARCHAR}
            ,#{item.space3,jdbcType=VARCHAR},now())
        </foreach>
    </insert>

    <insert id="updateVulnResourceBatch" parameterType="list" >
        <foreach collection="list" item="item"  separator=";" >
            insert into vuln_resource_ip_assets (
            id,vuln_resource_id,version,type,title,level,CVE,CNCVE,CNNVD,assets_id,assets_name,assets_host_name,assets_group
            ,send_id,send_status,send_time,back_status,back_time,back_user_id,correct_status,correct_time,misreport_status
            ,save_flag,save_time,find_time,scan_task,retest_num,is_retest_wrong,is_filtered,filtered_time,initial_task_id
            ,source_id,recurrent_vuln_id,scan_vuln,create_time,update_time,top_type,space1,space2,space3
            )
            values
            (
            #{item.id,jdbcType=VARCHAR}, #{item.vulnResourceId,jdbcType=VARCHAR}, #{item.version,jdbcType=VARCHAR},
            #{item.type,jdbcType=VARCHAR},#{item.title,jdbcType=VARCHAR}, #{item.level,jdbcType=CHAR},#{item.cve,jdbcType=VARCHAR},
            #{item.cncve,jdbcType=VARCHAR},#{item.cnnvd,jdbcType=VARCHAR},#{item.assetsId,jdbcType=VARCHAR},
            #{item.assetsName,jdbcType=VARCHAR},#{item.assetsHostName,jdbcType=VARCHAR},#{item.assetsGroup,jdbcType=VARCHAR},
            #{item.sendId,jdbcType=VARCHAR},#{item.sendStatus,jdbcType=CHAR},#{item.sendTime,jdbcType=TIMESTAMP},#{item.backStatus,jdbcType=VARCHAR},
            #{item.backTime,jdbcType=TIMESTAMP},#{item.backUserId,jdbcType=VARCHAR},#{item.correctStatus,jdbcType=CHAR},#{item.correctTime,jdbcType=TIMESTAMP},
            #{item.misreportStatus,jdbcType=CHAR},#{item.saveFlag,jdbcType=VARCHAR},#{item.saveTime,jdbcType=TIMESTAMP},#{item.findTime,jdbcType=TIMESTAMP},
            #{item.scanTask,jdbcType=VARCHAR},#{item.retestNum,jdbcType=VARCHAR},#{item.isRetestWrong,jdbcType=VARCHAR},#{item.isFiltered,jdbcType=CHAR},
            #{item.filteredTime,jdbcType=TIMESTAMP},#{item.initialTaskId,jdbcType=VARCHAR},#{item.sourceId,jdbcType=VARCHAR},#{item.recurrentVulnId,jdbcType=VARCHAR},
            #{item.scanVuln,jdbcType=VARCHAR},now(),now(),#{item.topType,jdbcType=VARCHAR},#{item.space1,jdbcType=VARCHAR},#{item.space2,jdbcType=VARCHAR},#{item.space3,jdbcType=VARCHAR}
            )
            on duplicate key
            update
            title = #{item.title,jdbcType=VARCHAR},
            version = #{item.version,jdbcType=VARCHAR},
            type = #{item.type,jdbcType=VARCHAR},
            level = #{item.level,jdbcType=CHAR},
            CVE = #{item.cve,jdbcType=VARCHAR},
            CNCVE = #{item.cncve,jdbcType=VARCHAR},
            CNNVD = #{item.cnnvd,jdbcType=VARCHAR},
            assets_id = #{item.assetsId,jdbcType=VARCHAR},
            dept_id = #{item.assetsDeptId,jdbcType=VARCHAR},
            assets_name = #{item.assetsName,jdbcType=VARCHAR},
            assets_host_name = #{item.submitTime,jdbcType=VARCHAR},
            assets_group = #{item.assetsGroup,jdbcType=VARCHAR},
            send_id = #{item.sendId,jdbcType=VARCHAR},
            send_status = #{item.sendStatus,jdbcType=CHAR},
            send_time = #{item.sendTime,jdbcType=TIMESTAMP},
            back_time = #{item.backTime,jdbcType=TIMESTAMP},
            back_status = #{item.backStatus,jdbcType=VARCHAR},
            back_user_id = #{item.backUserId,jdbcType=VARCHAR},
            correct_status = #{item.correctStatus,jdbcType=CHAR},
            correct_time = #{item.correctTime,jdbcType=TIMESTAMP},
            misreport_status = #{item.misreportStatus,jdbcType=CHAR},
            save_flag = #{item.saveFlag,jdbcType=CHAR},
            save_time = #{item.saveTime,jdbcType=TIMESTAMP},
            find_time = #{item.findTime,jdbcType=TIMESTAMP},
            scan_task = #{item.scanTask,jdbcType=VARCHAR},
            is_filtered = #{item.isFiltered,jdbcType=CHAR},
            filtered_time = #{item.filteredTime,jdbcType=TIMESTAMP},
            initial_task_id = #{item.initialTaskId,jdbcType=VARCHAR},
            source_id = #{item.sourceId,jdbcType=VARCHAR},
            recurrent_vuln_id = #{item.recurrentVulnId,jdbcType=VARCHAR},
            scan_vuln = #{item.scanVuln,jdbcType=VARCHAR},
            top_type = #{item.topType,jdbcType=VARCHAR},
            create_time = #{item.createTime,jdbcType=TIMESTAMP},
            update_time = #{item.updateTime,jdbcType=TIMESTAMP},
            space1 = #{item.space1,jdbcType=VARCHAR},
            space2 = #{item.space2,jdbcType=VARCHAR},
            space3 = #{item.space3,jdbcType=VARCHAR}
        </foreach>
    </insert>

    <insert id="insertResourceDetailBatch" parameterType="list">
        insert vuln_resource_detail (vuln_id,detail,reinforcement,version)
        values
        <foreach collection="list" item="item"  separator="," >
            (#{item.id,jdbcType=VARCHAR},#{item.detail,jdbcType=VARCHAR},
            #{item.reinforcement,jdbcType=VARCHAR},#{item.version,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <insert id="backupAssetsDetail" parameterType="java.util.HashMap">
        insert into vuln_resource_assets_detail(vuln_id,json_content) values (#{vulnId,jdbcType=VARCHAR},#{jsonContent,jdbcType=VARCHAR})
            on duplicate key
        update
            json_content = #{jsonContent,jdbcType=VARCHAR}
    </insert>

    <insert id="insertVulnResourceBusinessAssets" parameterType="java.util.List">
        insert into vuln_resource_business_assets (id,vuln_id,assets_business_id,assets_business_name)
        values
        <foreach collection="list" item="item" separator=",">
            (MD5(UUID()),#{item.vulnId,jdbcType=VARCHAR},#{item.id,jdbcType=VARCHAR},#{item.name,jdbcType=VARCHAR})
        </foreach>;
    </insert>

    <update id="matchingAssetsResource" parameterType="java.util.List">
        INSERT INTO vuln_assets_person (id, vuln_assets_id, assets_dept, assets_person)
        SELECT
        MD5(UUID()), va.id, va.dept_id, au.user_id
        FROM vuln_resource_ip_assets va
        INNER JOIN assets_resources_ports_service rs on va.vuln_ip = rs.ip and rs.`status` = '1'
        INNER JOIN assets_basic_user au ON au.assets_id = rs.assets_id
        WHERE au.`status` = '1'
        AND va.id IN
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item.id,jdbcType=VARCHAR}
        </foreach>
        AND NOT EXISTS (
            SELECT '' FROM vuln_assets_person vap WHERE vap.vuln_assets_id = va.id
        );

        INSERT INTO vuln_resource_assets_group (id, vuln_resource_id, assets_group)
        SELECT
        MD5(UUID()), va.id, arl.group_id
        FROM vuln_resource_ip_assets va
        INNER JOIN assets_resources_ports_service rs on va.vuln_ip = rs.ip and rs.`status` = '1'
        INNER JOIN assets_group_resource_rel arl ON arl.resource_id = rs.assets_id
        WHERE arl.`status` = '1'
        AND va.id IN
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item.id,jdbcType=VARCHAR}
        </foreach>
        AND NOT EXISTS (
            SELECT '' FROM vuln_resource_assets_group vag WHERE vag.vuln_resource_id = va.id
        );

        UPDATE vuln_resource_ip_assets va
        LEFT JOIN assets_resources_ports_service rs on va.vuln_ip = rs.ip and rs.`status` = '1'
        LEFT JOIN assets_resources r on rs.assets_id = r.id and r.`status` = '1'
        set va.assets_id = r.id,va.assets_name = r.`name`,
        va.dept_id = r.dept_id, va.assets_host_name = r.host_name,va.assets_group = r.assets_group_id
        where va.id in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item.id,jdbcType=VARCHAR}
        </foreach>;
    </update>

    <insert id="insertVulnResourceScreeningBatch">
        insert into vuln_screening_list (id, vuln_id,vuln_source,vuln_category, vuln_type,title,level,screening_type,create_time,assets_ip)
        select distinct MD5(UUID()), v.id, '3',v.top_type,v.type,v.title,v.level,'2',now(),vuln_ip
        from vuln_resource_ip_assets v
        WHERE v.back_status = '1' and v.misreport_status = '3'
          and v.save_flag = '0'
          and v.is_filtered = '0'
          AND NOT EXISTS (SELECT '' FROM vuln_screening_list WHERE vuln_id = v.id and `status` = '1')
    </insert>

    <select id="selectAllVulnList" resultType="com.starso.system.api.domain.TbVulnResourceIpAssets">
        select <include refid="Base_Column_List"/>
        from vuln_resource_ip_assets v
    </select>

    <delete id="deleteVulnResourceBusinessAssets">
        delete from vuln_resource_business_assets
    </delete>

</mapper>