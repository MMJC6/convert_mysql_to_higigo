<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.starso.job.modules.vuln.mapper.TbVulnBusinessMapper">

    <resultMap id="BaseResultMap" type="com.starso.system.api.domain.TbVulnBusiness" >
        <id column="id" property="id" jdbcType="VARCHAR" />
        <result column="title" property="title" jdbcType="VARCHAR" />
        <result column="source" property="source" jdbcType="CHAR" />
        <result column="type_id" property="typeId" jdbcType="VARCHAR" />
        <result column="level" property="level" jdbcType="CHAR" />
        <result column="system" property="system" jdbcType="VARCHAR" />
        <result column="system_url" property="systemUrl" jdbcType="VARCHAR" />
        <result column="ip" property="ip" jdbcType="BIGINT" />
        <result column="vuln_url" property="vulnUrl" jdbcType="VARCHAR" />
        <result column="vuln_code" property="vulnCode" jdbcType="VARCHAR" />
        <result column="method" property="method" jdbcType="VARCHAR" />
        <result column="test_param" property="testParam" jdbcType="VARCHAR" />
        <result column="risk_description" property="riskDescription" jdbcType="VARCHAR" />
        <result column="restoration_proposal" property="restorationProposal" jdbcType="VARCHAR" />
        <result column="initial_vuln_id" property="initialVulnId" jdbcType="VARCHAR" />
        <result column="scan_task_id" property="scanTaskId" jdbcType="VARCHAR" />
        <result column="find_time" property="findTime" jdbcType="TIMESTAMP" />
        <result column="submit_time" property="submitTime" jdbcType="TIMESTAMP" />
        <result column="deal_id" property="dealId" jdbcType="VARCHAR" />
        <result column="deal_time" property="dealTime" jdbcType="TIMESTAMP" />
        <result column="status" property="status" jdbcType="CHAR" />
        <result column="audit_id" property="auditId" jdbcType="VARCHAR" />
        <result column="audit_time" property="auditTime" jdbcType="TIMESTAMP" />
        <result column="audit_status" property="auditStatus" jdbcType="CHAR" />
        <result column="retest_id" property="retestId" jdbcType="VARCHAR" />
        <result column="retest_status" property="retestStatus" jdbcType="CHAR" />
        <result column="retest_user_id" property="retestUserId" jdbcType="VARCHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="update_by" property="updateBy" jdbcType="VARCHAR" />
        <result column="back_status" property="backStatus" jdbcType="CHAR" />
        <result column="back_time" property="backTime" jdbcType="TIMESTAMP" />
        <result column="back_user_id" property="backUserId" jdbcType="VARCHAR" />
        <result column="correct_status" property="correctStatus" jdbcType="CHAR" />
        <result column="correct_time" property="correctTime" jdbcType="TIMESTAMP" />
        <result column="misreport_status" property="misreportStatus" jdbcType="CHAR" />
        <result column="send_flag" property="sendFlag" jdbcType="CHAR" />
        <result column="send_time" property="sendTime" jdbcType="TIMESTAMP" />
        <result column="send_id" property="sendId" jdbcType="VARCHAR" />
        <result column="retest_target" property="retestTarget" jdbcType="CHAR" />
        <result column="is_filtered" property="isFiltered" jdbcType="CHAR" />
        <result column="filtered_time" property="filteredTime" jdbcType="TIMESTAMP" />
        <result column="recurrent_vuln_id" property="recurrentVulnId" jdbcType="VARCHAR" />
        <result column="save_flag" property="saveFlag" jdbcType="CHAR" />
        <result column="save_time" property="saveTime" jdbcType="TIMESTAMP" />
        <result column="test_rule" property="testRule" jdbcType="VARCHAR" />
        <result column="httpreq" property="httpreq" jdbcType="VARCHAR" />
        <result column="repetition_steps" property="repetitionSteps" jdbcType="VARCHAR" />
        <result column="spare1" property="spare1" jdbcType="VARCHAR" />
        <result column="spare2" property="spare2" jdbcType="VARCHAR" />
        <result column="spare3" property="spare3" jdbcType="VARCHAR" />
        <result column="spare4" property="spare4" jdbcType="VARCHAR" />
        <result column="spare5" property="spare5" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="Base_Column_List" >
        v.id, v.title, v.source, v.type_id, v.level, v.`system`, v.system_url, v.ip, v.vuln_url,
        v.vuln_code, v.method, v.test_param, v.risk_description, v.restoration_proposal, v.initial_vuln_id,
        v.scan_task_id,v.find_time,v.submit_time,
        v.deal_id, v.deal_time, v.status, v.audit_id,
        v.audit_time, v.audit_status, v.retest_id, v.retest_status, v.retest_user_id, v.create_time,
        v.update_time, v.update_by,v.back_status, v.back_time, v.back_user_id, v.correct_status, v.correct_time,
        v.misreport_status, v.send_flag, v.send_time, v.send_id, v.retest_target, v.is_filtered, v.filtered_time,
        v.recurrent_vuln_id, v.save_flag, v.save_time, v.spare1, v.spare2, v.spare3, v.spare4, v.spare5,
        v. test_rule, v.httpreq, v.repetition_steps
    </sql>

    <select id="selectVuluBusinessById" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from vuln_business v
        where v.id = #{id,jdbcType=VARCHAR}
    </select>

    <insert id="insertVulnBusinessBatch" parameterType="list" >
        insert into vuln_business (id, title, source,
        type_id, level,
        `system`, system_url, ip,
        vuln_url, vuln_code, method,
        test_param, risk_description, restoration_proposal,
        initial_vuln_id, scan_task_id, find_time,
        submit_time, deal_id,
        deal_time, status, audit_id,
        audit_time, audit_status, retest_id,
        retest_status, retest_user_id, create_time,
        update_time, update_by, back_status,
        back_time, back_user_id, correct_status,
        correct_time, misreport_status, send_flag,
        send_time, send_id, retest_target,
        is_filtered, filtered_time, recurrent_vuln_id,
        save_flag, save_time, receive_time,spare1,
        spare2, spare3, spare4,
        spare5, test_rule, httpreq,
        repetition_steps
        )
        values
        <foreach collection="list" item="item"  separator="," >
            (#{item.id,jdbcType=VARCHAR}, #{item.title,jdbcType=VARCHAR}, #{item.source,jdbcType=CHAR},
            #{item.typeId,jdbcType=VARCHAR}, #{item.level,jdbcType=CHAR},
            #{item.system,jdbcType=VARCHAR}, #{item.systemUrl,jdbcType=VARCHAR}, #{item.ip,jdbcType=BIGINT},
            #{item.vulnUrl,jdbcType=VARCHAR}, #{item.vulnCode,jdbcType=VARCHAR}, #{item.method,jdbcType=VARCHAR},
            #{item.testParam,jdbcType=VARCHAR}, #{item.riskDescription,jdbcType=VARCHAR}, #{item.restorationProposal,jdbcType=VARCHAR},
            #{item.initialVulnId,jdbcType=VARCHAR}, #{item.scanTaskId,jdbcType=VARCHAR}, #{item.findTime,jdbcType=TIMESTAMP},
            #{item.submitTime,jdbcType=TIMESTAMP}, #{item.dealId,jdbcType=VARCHAR},
            #{item.dealTime,jdbcType=TIMESTAMP}, #{item.status,jdbcType=CHAR}, #{item.auditId,jdbcType=VARCHAR},
            #{item.auditTime,jdbcType=TIMESTAMP}, #{item.auditStatus,jdbcType=CHAR}, #{item.retestId,jdbcType=VARCHAR},
            #{item.retestStatus,jdbcType=CHAR}, #{item.retestUserId,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP},
            #{item.updateTime,jdbcType=TIMESTAMP}, #{item.updateBy,jdbcType=VARCHAR}, #{item.backStatus,jdbcType=CHAR},
            #{item.backTime,jdbcType=TIMESTAMP}, #{item.backUserId,jdbcType=VARCHAR}, #{item.correctStatus,jdbcType=CHAR},
            #{item.correctTime,jdbcType=TIMESTAMP}, #{item.misreportStatus,jdbcType=CHAR}, #{item.sendFlag,jdbcType=CHAR},
            #{item.sendTime,jdbcType=TIMESTAMP}, #{item.sendId,jdbcType=VARCHAR}, #{item.retestTarget,jdbcType=CHAR},
            #{item.isFiltered,jdbcType=CHAR}, #{item.filteredTime,jdbcType=TIMESTAMP}, #{item.recurrentVulnId,jdbcType=VARCHAR},
            #{item.saveFlag,jdbcType=CHAR}, #{item.saveTime,jdbcType=TIMESTAMP},now(), #{item.spare1,jdbcType=VARCHAR},
            #{item.spare2,jdbcType=VARCHAR}, #{item.spare3,jdbcType=VARCHAR}, #{item.spare4,jdbcType=VARCHAR},
            #{item.spare5,jdbcType=VARCHAR}, #{item.testRule,jdbcType=VARCHAR}, #{item.httpreq,jdbcType=VARCHAR},
            #{item.repetitionSteps,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <insert id="updateVulnBusinessBatch" parameterType="list" >
        <foreach collection="list" item="item"  separator=";" >
            insert into vuln_business (
            id, title,level,
            vuln_code, method,
            test_param,
            initial_vuln_id, scan_task_id, find_time,
            submit_time, deal_id,
            deal_time, status, audit_id,
            audit_time, audit_status, retest_id,
            retest_status, retest_user_id, create_time,
            update_time, update_by, back_status,
            back_time, back_user_id, correct_status,
            correct_time, misreport_status, send_flag,
            send_time, send_id, retest_target,
            is_filtered, filtered_time, recurrent_vuln_id,
            save_flag, save_time, spare1,
            spare2, spare3, spare4,
            spare5, test_rule, httpreq,
            repetition_steps
            )
            values
            (
            #{item.id,jdbcType=VARCHAR}, #{item.title,jdbcType=VARCHAR},
            #{item.level,jdbcType=CHAR},
            #{item.vulnCode,jdbcType=VARCHAR}, #{item.method,jdbcType=VARCHAR},
            #{item.testParam,jdbcType=VARCHAR},
            #{item.initialVulnId,jdbcType=VARCHAR}, #{item.scanTaskId,jdbcType=VARCHAR}, #{item.findTime,jdbcType=TIMESTAMP},
            #{item.submitTime,jdbcType=TIMESTAMP}, #{item.dealId,jdbcType=VARCHAR},
            #{item.dealTime,jdbcType=TIMESTAMP}, #{item.status,jdbcType=CHAR}, #{item.auditId,jdbcType=VARCHAR},
            #{item.auditTime,jdbcType=TIMESTAMP}, #{item.auditStatus,jdbcType=CHAR}, #{item.retestId,jdbcType=VARCHAR},
            #{item.retestStatus,jdbcType=CHAR}, #{item.retestUserId,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP},
            #{item.updateTime,jdbcType=TIMESTAMP}, #{item.updateBy,jdbcType=VARCHAR}, #{item.backStatus,jdbcType=CHAR},
            #{item.backTime,jdbcType=TIMESTAMP}, #{item.backUserId,jdbcType=VARCHAR}, #{item.correctStatus,jdbcType=CHAR},
            #{item.correctTime,jdbcType=TIMESTAMP}, #{item.misreportStatus,jdbcType=CHAR}, #{item.sendFlag,jdbcType=CHAR},
            #{item.sendTime,jdbcType=TIMESTAMP}, #{item.sendId,jdbcType=VARCHAR}, #{item.retestTarget,jdbcType=CHAR},
            #{item.isFiltered,jdbcType=CHAR}, #{item.filteredTime,jdbcType=TIMESTAMP}, #{item.recurrentVulnId,jdbcType=VARCHAR},
            #{item.saveFlag,jdbcType=CHAR}, #{item.saveTime,jdbcType=TIMESTAMP}, #{item.spare1,jdbcType=VARCHAR},
            #{item.spare2,jdbcType=VARCHAR}, #{item.spare3,jdbcType=VARCHAR}, #{item.spare4,jdbcType=VARCHAR},
            #{item.spare5,jdbcType=VARCHAR}, #{item.testRule,jdbcType=VARCHAR}, #{item.httpreq,jdbcType=VARCHAR},
            #{item.repetitionSteps,jdbcType=VARCHAR}
            )
            on duplicate key
            update
            title = #{item.title,jdbcType=VARCHAR},
            level = #{item.level,jdbcType=CHAR},
            vuln_code = #{item.vulnCode,jdbcType=VARCHAR},
            method = #{item.method,jdbcType=VARCHAR},
            test_param = #{item.testParam,jdbcType=VARCHAR},
            initial_vuln_id = #{item.initialVulnId,jdbcType=VARCHAR},
            scan_task_id = #{item.scanTaskId,jdbcType=VARCHAR},
            find_time = #{item.findTime,jdbcType=TIMESTAMP},
            submit_time = #{item.submitTime,jdbcType=TIMESTAMP},
            deal_id = #{item.dealId,jdbcType=VARCHAR},
            deal_time = #{item.dealTime,jdbcType=TIMESTAMP},
            status = #{item.status,jdbcType=CHAR},
            audit_id = #{item.auditId,jdbcType=VARCHAR},
            audit_time = #{item.auditTime,jdbcType=TIMESTAMP},
            audit_status = #{item.auditStatus,jdbcType=CHAR},
            retest_id = #{item.retestId,jdbcType=VARCHAR},
            retest_status = #{item.retestStatus,jdbcType=CHAR},
            retest_user_id = #{item.retestUserId,jdbcType=VARCHAR},
            create_time = #{item.createTime,jdbcType=TIMESTAMP},
            update_time = #{item.updateTime,jdbcType=TIMESTAMP},
            update_by = #{item.updateBy,jdbcType=VARCHAR},
            back_status = #{item.backStatus,jdbcType=CHAR},
            back_time = #{item.backTime,jdbcType=TIMESTAMP},
            back_user_id = #{item.backUserId,jdbcType=VARCHAR},
            correct_status = #{item.correctStatus,jdbcType=CHAR},
            correct_time = #{item.correctTime,jdbcType=TIMESTAMP},
            misreport_status = #{item.misreportStatus,jdbcType=CHAR},
            send_flag = #{item.sendFlag,jdbcType=CHAR},
            send_time = #{item.sendTime,jdbcType=TIMESTAMP},
            send_id = #{item.sendId,jdbcType=VARCHAR},
            retest_target = #{item.retestTarget,jdbcType=CHAR},
            is_filtered = #{item.isFiltered,jdbcType=CHAR},
            filtered_time = #{item.filteredTime,jdbcType=TIMESTAMP},
            recurrent_vuln_id = #{item.recurrentVulnId,jdbcType=VARCHAR},
            save_flag = #{item.saveFlag,jdbcType=CHAR},
            save_time = #{item.saveTime,jdbcType=TIMESTAMP},
            spare1 = #{item.spare1,jdbcType=VARCHAR},
            spare2 = #{item.spare2,jdbcType=VARCHAR},
            spare3 = #{item.spare3,jdbcType=VARCHAR},
            spare4 = #{item.spare4,jdbcType=VARCHAR},
            spare5 = #{item.spare5,jdbcType=VARCHAR},
            test_rule = #{item.testRule,jdbcType=VARCHAR},
            httpreq = #{item.httpreq,jdbcType=VARCHAR},
            repetition_steps = #{item.repetitionSteps,jdbcType=VARCHAR}
        </foreach>
    </insert>

    <insert id="insertVulnbusinessAuditBatch" parameterType="list" >
        replace into vuln_business_audit (id, vuln_business_id, status,
        comment, audit_id, audit_time,retest_id)
        values
        <foreach collection="list" item="item"  separator="," >
            (#{item.id,jdbcType=VARCHAR}, #{item.vulnBusinessId,jdbcType=VARCHAR}, #{item.status,jdbcType=CHAR},
            #{item.comment,jdbcType=VARCHAR}, #{item.auditId,jdbcType=VARCHAR}, #{item.auditTime,jdbcType=TIMESTAMP},
            #{item.retestId,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <insert id="insertVulnbusinessRetestBatch" parameterType="list" >
        replace into vuln_business_retest (id, vuln_business_id, result,
        retest_user, retest_time, dis_id,dis_time, dis_type, detail
        )
        values
        <foreach collection="list" item="item"  separator="," >
            (#{item.id,jdbcType=VARCHAR}, #{item.vulnBusinessId,jdbcType=VARCHAR}, #{item.result,jdbcType=VARCHAR},
            #{item.retestUser,jdbcType=VARCHAR}, #{item.retestTime,jdbcType=TIMESTAMP}, #{item.disId,jdbcType=VARCHAR},
            #{item.disTime,jdbcType=TIMESTAMP}, #{item.disType,jdbcType=CHAR}, #{item.detail,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <insert id="insertVulnbusinessLogBatch" parameterType="list">
        insert into vuln_operation_log (
        id,
        vuln_id,
        url_id,
        retest_id,
        same_vuln_id,
        remark,
        new_msg,
        old_msg,
        type,
        operationer,
        operation_time
        )
        values
        <foreach collection="list" item="item"  separator="," >
            (
            #{item.id,jdbcType=VARCHAR},
            #{item.vulnId,jdbcType=VARCHAR},
            #{item.urlId,jdbcType=VARCHAR},
            #{item.retestId,jdbcType=VARCHAR},
            #{item.sameVulnId,jdbcType=VARCHAR},
            #{item.remark,jdbcType=VARCHAR},
            #{item.newMsg,jdbcType=VARCHAR},
            #{item.oldMsg,jdbcType=VARCHAR},
            #{item.type,jdbcType=CHAR},
            #{item.operationer,jdbcType=VARCHAR},
            #{item.operationTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <insert id="insertVulnbusinessFileBatch" parameterType="list">
        insert into vuln_business_file (
        id,
        vuln_business_id,
        file_id,
        status
        )
        values
        <foreach collection="list" item="item"  separator="," >
            (
            #{item.id,jdbcType=VARCHAR},
            #{item.vulnBusinessId,jdbcType=VARCHAR},
            #{item.fileId,jdbcType=VARCHAR},
            #{item.status,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <insert id="updateVulnbusinessFileBatch" parameterType="list">
        <foreach collection="list" item="item"  separator=";" >
            insert into vuln_business_file (
            id,
            vuln_business_id,
            file_id,
            status
            )
            values
            (
            #{item.id,jdbcType=VARCHAR},
            #{item.vulnBusinessId,jdbcType=VARCHAR},
            #{item.fileId,jdbcType=VARCHAR},
            #{item.status,jdbcType=VARCHAR}
            )
            on duplicate key
            update
            vuln_business_id=#{item.vulnBusinessId,jdbcType=VARCHAR},
            file_id=#{item.fileId,jdbcType=VARCHAR},
            status= #{item.status,jdbcType=VARCHAR}
        </foreach>
    </insert>

    <insert id="insertVulnBusinessAssetsBatch">
        insert into vuln_business_assets (id, vuln_business_id, assets_id, dept_id,name,create_time)
        select DISTINCT
            MD5(UUID()),
            v.id,
            ab.id,
            ab.dept_id,
            ab.name,
            now()
        from vuln_business v
        INNER JOIN assets_vuln_rel d ON d.vuln_business_id =v.id
        INNER JOIN assets_business ab ON  ab.id = d.assets_business_id AND ab.`status` = 1
        where ((v.back_status = '3' and v.correct_status = '4') or (v.back_status = '1' and v.misreport_status = '3'))
          and v.save_flag = '0'
          and v.is_filtered = '0'
          and v.status != '0'
          AND NOT EXISTS (SELECT '' FROM vuln_business_assets WHERE vuln_business_id = v.id)
        ORDER BY v.initial_vuln_id
    </insert>

    <insert id="insertVulnBusinessAssetsGroupBatch">
        insert into vuln_business_assets_group (id, vuln_business_id, assets_group)
        SELECT DISTINCT MD5(UUID()), va.vuln_business_id,ag.id
        FROM assets_group ag
         INNER JOIN assets_group_business_rel ar ON ag.id = ar.group_id AND ar.`status` = 1
         INNER JOIN vuln_business_assets va ON ar.business_id = va.assets_id
        WHERE ag.`status` = 1
          AND EXISTS
            (SELECT '' FROM vuln_business v
             WHERE ((v.back_status = '3' and v.correct_status = '4') or (v.back_status = '1' and v.misreport_status = '3'))
               and v.save_flag = '0'
               and v.is_filtered = '0'
               and v.status != '0'
               and v.id = va.vuln_business_id
              )
          AND NOT EXISTS (SELECT '' FROM vuln_business_assets_group WHERE vuln_business_id = va.vuln_business_id AND assets_group = ag.id)
    </insert>

    <insert id="insertVulnAssetsPersonBatch">
        INSERT INTO vuln_assets_person
            (id, vuln_assets_id, assets_dept, assets_person)
        SELECT DISTINCT MD5(UUID()), v.id,va.dept_id,u.user_id
        FROM vuln_business v
         INNER JOIN vuln_business_assets va ON v.id = va.vuln_business_id
         INNER JOIN assets_business_user u ON va.assets_id = u.assets_id AND u.`status` = 1
        WHERE ((v.back_status = '3' and v.correct_status = '4') or (v.back_status = '1' and v.misreport_status = '3'))
          and v.save_flag = '0'
          and v.is_filtered = '0'
          and v.status != '0'
          AND NOT EXISTS (SELECT '' FROM vuln_assets_person WHERE vuln_assets_id = v.id AND assets_person = u.user_id)
    </insert>

    <insert id="insertVulnBusinessAssetsIpBatch">
        insert into vuln_business_assets_ip (id, vba_id, ip,ip_type, status,create_time)
        SELECT DISTINCT MD5(UUID()),va.id,abs.ip,abs.network_type,'1',now()
        FROM vuln_business v
         INNER JOIN vuln_business_assets va ON v.id = va.vuln_business_id
         INNER JOIN assets_business_ports_service abs ON va.assets_id = abs.assets_id AND abs.`status` = 1
        WHERE ((v.back_status = '3' and v.correct_status = '4') or (v.back_status = '1' and v.misreport_status = '3'))
          and v.save_flag = '0'
          and v.is_filtered = '0'
          and v.status != '0'
          AND NOT EXISTS (SELECT '' FROM vuln_business_assets_ip WHERE vba_id = va.id AND ip = abs.ip AND ip_type = abs.network_type)
    </insert>

    <insert id="insertVulnBusinessScreeningBatch">
        insert into vuln_screening_list (id, vuln_id, vuln_source,vuln_category, vuln_type,title,vuln_url,domain,level,screening_type,create_time)
        select distinct MD5(UUID()), v.id, v.source,IF(v.source = '1',(SELECT name from soss_vuln_type where id = sot.parent_id),(SELECT name from soss_vuln_type where id = sct.parent_id) )category,
                        IF(v.source = '1', so.name,sc.name) type,concat('Vul # ',v.vuln_code,'-',v.title) title,v.vuln_url,v.vuln_url,v.level,'2',now()
        from vuln_business v
        LEFT JOIN soss_vuln_type sot ON v.type_id = sot.id
        LEFT JOIN soss_vuln_type sct ON v.type_id = sct.id
        LEFT JOIN soss_vuln_type so ON v.type_id = so.id
        LEFT JOIN soss_vuln_type sc ON v.type_id = sc.id
        WHERE v.back_status = '1' and v.misreport_status = '3'
        and v.save_flag = '0'
        and v.is_filtered = '0'
        and v.status !='0'
        AND NOT EXISTS (SELECT '' FROM vuln_screening_list WHERE vuln_id = v.id AND `status` = '1')
    </insert>

    <select id="selectSossVulnTypeList" resultType="com.starso.system.api.domain.TbTestVulnType">
        select * from soss_vuln_type
    </select>

    <select id="selectScanVulnTypeList" resultType="com.starso.system.api.domain.TbWebVulnType">
        select * from scan_vuln_type
    </select>

    <insert id="insertSossVulnTypeBatch" parameterType="list">
        <foreach collection="list" item="item"  separator=";" >
        insert into soss_vuln_type (id,parent_id,name,risk_description,restoration_proposal,level,remarks,status,create_time,update_time,spare1,spare2,spare3,spare4,spare5)
        values
            (
            #{item.id,jdbcType=BIGINT},
            #{item.parentId,jdbcType=BIGINT},
            #{item.name,jdbcType=VARCHAR},
            #{item.riskDescription,jdbcType=VARCHAR},
            #{item.restorationProposal,jdbcType=VARCHAR},
            #{item.level,jdbcType=VARCHAR},
            #{item.remarks,jdbcType=VARCHAR},
            #{item.status,jdbcType=VARCHAR},
            #{item.createTime,jdbcType=TIMESTAMP},
            #{item.updateTime,jdbcType=TIMESTAMP},
            #{item.spare1,jdbcType=VARCHAR},
            #{item.spare2,jdbcType=VARCHAR},
            #{item.spare3,jdbcType=VARCHAR},
            #{item.spare4,jdbcType=VARCHAR},
            #{item.spare5,jdbcType=VARCHAR}
            )
            on duplicate key
            update
            id=#{item.id,jdbcType=BIGINT},
            parent_id=#{item.parentId,jdbcType=BIGINT},
            `name`=#{item.name,jdbcType=VARCHAR},
            risk_description=#{item.riskDescription,jdbcType=VARCHAR},
            restoration_proposal=#{item.restorationProposal,jdbcType=VARCHAR},
            `level`=#{item.level,jdbcType=VARCHAR},
            remarks=#{item.remarks,jdbcType=VARCHAR},
            status=#{item.status,jdbcType=VARCHAR},
            create_time=#{item.createTime,jdbcType=TIMESTAMP},
            update_time=#{item.updateTime,jdbcType=TIMESTAMP},
            spare1=#{item.spare1,jdbcType=VARCHAR},
            spare2=#{item.spare2,jdbcType=VARCHAR},
            spare3=#{item.spare3,jdbcType=VARCHAR},
            spare4=#{item.spare4,jdbcType=VARCHAR},
            spare5=#{item.spare5,jdbcType=VARCHAR}
        </foreach>
    </insert>
    <insert id="insertScanVulnTypeBatch" parameterType="list">
        <foreach collection="list" item="item"  separator=";" >
        insert into scan_vuln_type (id,parent_id,name,new_name,vuln_type_sort,risk_validation,risk_description,risk_description_new,
                                    restoration_proposal,restoration_proposal_new,remarks,status,level,level_new,update_time)
        values(
            #{item.id,jdbcType=BIGINT},
            #{item.parentId,jdbcType=BIGINT},
            #{item.name,jdbcType=VARCHAR},
            #{item.newName,jdbcType=VARCHAR},
            #{item.vulnTypeSort,jdbcType=VARCHAR},
            #{item.riskValidation,jdbcType=VARCHAR},
            #{item.riskDescription,jdbcType=VARCHAR},
            #{item.riskDescriptionNew,jdbcType=VARCHAR},
            #{item.restorationProposal,jdbcType=VARCHAR},
            #{item.restorationProposalNew,jdbcType=VARCHAR},
            #{item.remarks,jdbcType=VARCHAR},
            #{item.status,jdbcType=VARCHAR},
            #{item.level,jdbcType=VARCHAR},
            #{item.levelNew,jdbcType=VARCHAR},
            #{item.updateTime,jdbcType=TIMESTAMP}
            )
            on duplicate key
            update
            id=#{item.id,jdbcType=BIGINT},
            parent_id=#{item.parentId,jdbcType=BIGINT},
            `name`=#{item.name,jdbcType=VARCHAR},
            new_name=#{item.newName,jdbcType=VARCHAR},
            vuln_type_sort=#{item.vulnTypeSort,jdbcType=VARCHAR},
            risk_validation=#{item.riskValidation,jdbcType=VARCHAR},
            risk_description=#{item.riskDescription,jdbcType=VARCHAR},
            risk_description_new=#{item.riskDescriptionNew,jdbcType=VARCHAR},
            restoration_proposal=#{item.restorationProposal,jdbcType=VARCHAR},
            restoration_proposal_new=#{item.restorationProposalNew,jdbcType=VARCHAR},
            remarks=#{item.remarks,jdbcType=VARCHAR},
            status=#{item.status,jdbcType=VARCHAR},
            `level`=#{item.level,jdbcType=VARCHAR},
            level_new=#{item.levelNew,jdbcType=VARCHAR},
            update_time=#{item.updateTime,jdbcType=TIMESTAMP}
        </foreach>
    </insert>

    <delete id="deleteScanVulnType">
        delete from scan_vuln_type
    </delete>

    <delete id="deleteSossVulnType">
        delete from soss_vuln_type
    </delete>

</mapper>
